syntax = "proto2";
package apollo.control;

import "modules/common/proto/header.proto";


// next id : 27
message LinControlCommand {
  optional apollo.common.Header header = 1;
  // target throttle in percentage [0, 100]
  optional double linear_velocity = 3;

  // target brake in percentage [0, 100]
  optional double brake = 4;

  // target non-directional steering rate, in percentage of full scale per second [0, 100]
  optional double angular_velocity = 6;

  // target steering angle, in percentage of full scale [-100, 100]
  optional double steering_target = 7;

  // parking brake engage. true: engaged
  optional bool parking_brake = 8;

  // target speed, in m/s
  optional double speed = 9;

  // target acceleration in m`s^-2
  optional double acceleration = 10;

  optional LinDebug lin_debug = 11;
}


message LinSimplePIDDebug {
  optional double lateral_error = 1;
  optional double ref_heading = 2;
  optional double heading = 3;
  optional double heading_error = 4;
  optional double heading_error_rate = 5;
  optional double lateral_error_rate = 6;
  optional double curvature = 7;
  optional double steer_angle = 8;
  optional double steer_angle_feedforward = 9;
  optional double steer_angle_lateral_contribution = 10;
  optional double steer_angle_lateral_rate_contribution = 11;
  optional double steer_angle_heading_contribution = 12;
  optional double steer_angle_heading_rate_contribution = 13;
  optional double steer_angle_feedback = 14;
  optional double steering_position = 15;
  optional double ref_speed = 16;
  optional double steer_angle_limited = 17;
  optional double station_reference = 18;
  optional double station_error = 19;
  optional double speed_reference = 20;
  optional double speed_error = 21;
  optional double acceleration_reference = 22;
  optional bool is_full_stop = 23;
  optional double station_feedback = 24;
  optional double speed_feedback = 25;
  optional double acceleration_cmd_closeloop = 26;
  optional double acceleration_cmd = 27;
  optional double acceleration_lookup = 28;
  optional double speed_lookup = 29;
}

message LinDebug {
  optional LinSimplePIDDebug simple_pid_debug = 2;
}
